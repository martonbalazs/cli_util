#!/bin/bash
#2019-01-28

#Credits go to Paul Colby (http://colby.id.au), who says no rights reserved ;)
#http://colby.id.au/node/39

delay=2		# Seconds to wait before next measurement

if [ ! -d $HOME/.cpucsekk/ ]
then
 mkdir $HOME/.cpucsekk/
fi

# Edit this file for different CPU load levels.
if [ ! -f $HOME/.cpucsekk/cpucsekk.txt ]
then
 echo "15" > $HOME/.cpucsekk/cpucsekk.txt
fi


LOAD=100
 CPU=(`grep '^cpu ' /proc/stat`)
 unset CPU[0]                          # Discard the "cpu" prefix.
 IDLEA=${CPU[4]}                        # Get the idle CPU time.
  
 # Calculate the total CPU time.
 TOTALA=0
 for VALUE in "${CPU[@]}"; do
  let "TOTALA=$TOTALA+$VALUE"
 done
 
while true; do		# While load > $cpupc%
 cpupc=`cat $HOME/.cpucsekk/cpucsekk.txt`	# How low do we allow to step to the next task

 re='^[0-9]+$'
 if ! [[ $cpupc =~ $re ]] ; then
  echo "$HOME/.cpucsekk/cpucsekk.txt should contain a single percentage number." >&2; exit 1
 fi
 #osda=`cat /sys/block/sda/stat | awk '{ print($NF) }'`	# also check sda is not busy. (currently only sda is checked...)
 osda=`cat /sys/block/sda/stat | awk '{ print($11) }'`	# also check sda is not busy. (currently only sda is checked...)
 ki="n"

 # There have been read error problems: "read error: 0: Resource temporarily unavailable"
 # https://stackoverflow.com/questions/19895185/bash-shell-read-error-0-resource-temporarily-unavailable
 # cpucsekk seems a good place to try cure this.
 # python3 -c $'import os\nos.set_blocking(0, True)'
 #cat /proc/self/fdinfo/0
 read -t $delay -p "Skip cpucsekk? y/n " ki
 if [ "$ki" == "y" ]; then
  break
 fi

 #nsda=`cat /sys/block/sda/stat | awk '{ print($NF) }'`
 nsda=`cat /sys/block/sda/stat | awk '{ print($11) }'`
 
 CPU=(`grep '^cpu ' /proc/stat`)
 unset CPU[0]                          # Discard the "cpu" prefix.
 IDLEB=${CPU[4]}                        # Get the idle CPU time.
  
 # Calculate the total CPU time.
 TOTALB=0
 for VALUE in "${CPU[@]}"; do
  let "TOTALB=$TOTALB+$VALUE"
 done
 
 let "TOTAL=$TOTALB-$TOTALA"		# Increments since last round
 let "IDLE=$IDLEB-$IDLEA"
 let "LOAD=100*($TOTAL-$IDLE)/$TOTAL"	# Load percent since last round
 
 ido=`date +%T`
 topbol=`top -b -n1 |
  awk '{
   if ($1=="PID"){
    getline
    i=NF-3
    print $i"%  \t" $NF
   }
  }'`
 let "ioincr=$nsda-$osda"
 echo "$ido  io: $ioincr  total load: $LOAD%	top of top: $topbol"
 TOTALA=$TOTALB				# Turn this round into last round
 IDLEA=$IDLEB

 #if [[ $LOAD -lt $cpupc ]] ; then
 if [[ $LOAD -lt $cpupc ]] && [[ $osda == $nsda ]] ; then
  # python3 -c $'import os\nos.set_blocking(0, True)'
  #cat /proc/self/fdinfo/0
  break
 fi
done
