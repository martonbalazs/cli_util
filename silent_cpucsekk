#!/bin/bash
#2020-11-10

#Credits go to Paul Colby (http://colby.id.au), who says no rights reserved ;)
#http://colby.id.au/node/39

delay=1		# Seconds to wait before next measurement
swapthr=80	# Also hangs if swap is more full than this percent

if [ ! -d $HOME/.cpucsekk/ ]
then
 mkdir $HOME/.cpucsekk/
fi

# Edit this file for different CPU load levels.
if [ ! -f $HOME/.cpucsekk/silent_cpucsekk.txt ]
then
 echo "15" > $HOME/.cpucsekk/silent_cpucsekk.txt
fi

LOAD=100
 CPU=(`grep '^cpu ' /proc/stat`)
 unset CPU[0]                          # Discard the "cpu" prefix.
 IDLEA=${CPU[4]}                        # Get the idle CPU time.
  
 # Calculate the total CPU time.
 TOTALA=0
 for VALUE in "${CPU[@]}"; do
  let "TOTALA=$TOTALA+$VALUE"
 done
 
while true; do		# While load > $cpupc%
 cpupc=`cat $HOME/.cpucsekk/silent_cpucsekk.txt`	# How low do we allow to step to the next task

 re='^[0-9]+$'
 if ! [[ $cpupc =~ $re ]] ; then
  echo "$HOME/.cpucsekk/silent_cpucsekk.txt should contain a single percentage number." >&2; exit 1
 fi

# osda=`cat /sys/block/sda/stat | awk '{ print($NF) }'`	# also check sda is not busy. (currently only sda is checked...)
 osda=`cat /sys/block/sda/stat | awk '{ print($11) }'`	# also check sda is not busy. (currently only sda is checked...)

 sleep $delay

 #nsda=`cat /sys/block/sda/stat | awk '{ print($NF) }'`
 nsda=`cat /sys/block/sda/stat | awk '{ print($11) }'`
 
 CPU=(`grep '^cpu ' /proc/stat`)
 unset CPU[0]                          # Discard the "cpu" prefix.
 IDLEB=${CPU[4]}                        # Get the idle CPU time.
  
 # Calculate the total CPU time.
 TOTALB=0
 for VALUE in "${CPU[@]}"; do
  let "TOTALB=$TOTALB+$VALUE"
 done
 
 let "TOTAL=$TOTALB-$TOTALA"		# Increments since last round
 #echo "$TOTAL"
 let "IDLE=$IDLEB-$IDLEA"
 let "LOAD=100*($TOTAL-$IDLE)/$TOTAL"	# Load percent since last round

# Now let's look at the swap
 swaptot=$(awk '$1~/^SwapTotal/ {print($2)}' /proc/meminfo)
 swapfr=$(awk '$1~/^SwapFree/ {print($2)}' /proc/meminfo)
 if [[ "$swaptot" =~ ^[0-9]+$ ]] && [[ "$swaptot" != "0" ]]
 then
  swappc=$((100-100*$swapfr/$swaptot))
 else
  swappc=0
 fi
 
 TOTALA=$TOTALB				# Turn this round into last round
 IDLEA=$IDLEB

 #if [[ $LOAD -lt $cpupc ]] ; then
 if [[ $LOAD -lt $cpupc ]] && [[ $osda == $nsda ]] && [[ $swappc -lt $swapthr ]] ; then
  break
 fi
done
